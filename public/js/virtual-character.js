const character = document.querySelector('.robot');
const chatMessages = document.getElementById('chat-messages');
const userInput = document.getElementById('user-input');
const voiceSelect = document.getElementById('voice-select');
const serverModelSelect = document.getElementById('server-model-select');
const combinedVoiceSelect = document.getElementById('combined-voice-select');
const rateRange = document.getElementById('rate-range');
const pitchRange = document.getElementById('pitch-range');
const rateValue = document.getElementById('rate-value');
const pitchValue = document.getElementById('pitch-value');
const useWebSpeech = document.getElementById('use-web-speech');
const forceVietnamese = document.getElementById('force-vietnamese');
const browserTab = document.getElementById('browser-tab');
const serverTab = document.getElementById('server-tab');

let speechSynthesis = window.speechSynthesis;
let speechUtterance = null;
let speechRecognition = null;
let isListening = false;
let selectedServerModel = '';
let serverTtsActive = true; // Tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa server TTS
let isSpeaking = false; // Tr·∫°ng th√°i ƒëang n√≥i
let isPaused = false; // Tr·∫°ng th√°i t·∫°m d·ª´ng
let currentAudio = null; // ƒê·ªëi t∆∞·ª£ng audio hi·ªán t·∫°i (cho server TTS)

// T·∫£i danh s√°ch model t·ª´ server
async function loadServerModels() {
    try {
        const response = await fetch('/virtual-character/tts/models');
        if (!response.ok) {
            throw new Error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch model');
        }
        
        const models = await response.json();
        
        if (models.length === 0) {
            showServerTtsWarning(true);
            return;
        }
        
        // C·∫≠p nh·∫≠t select
        serverModelSelect.innerHTML = '';
        models.forEach(model => {
            const option = document.createElement('option');
            option.value = model.id;
            option.textContent = model.name;
            serverModelSelect.appendChild(option);
        });
        
        // C·∫≠p nh·∫≠t combined select cho server models
        const serverOptgroup = combinedVoiceSelect.querySelector('optgroup[label="Gi·ªçng server"]');
        if (serverOptgroup) {
            serverOptgroup.innerHTML = ''; // X√≥a placeholders
            models.forEach(model => {
                const option = document.createElement('option');
                option.value = 'server:' + model.id;
                option.textContent = model.name;
                option.dataset.isServer = 'true';
                serverOptgroup.appendChild(option);
            });
        }
        
        // L∆∞u model ƒë√£ ch·ªçn
        if (models.length > 0) {
            selectedServerModel = models[0].id;
            showServerTtsWarning(false);
        }
        
        updateCombinedVoiceSelect();
    } catch (error) {
        console.error('L·ªói t·∫£i danh s√°ch model:', error);
        serverModelSelect.innerHTML = '<option value="">L·ªói t·∫£i danh s√°ch model</option>';
        showServerTtsWarning(true);
    }
}

// Hi·ªÉn th·ªã/·∫©n th√¥ng b√°o c·∫£nh b√°o v·ªÅ server TTS
function showServerTtsWarning(show) {
    const warningElement = document.getElementById('server-tts-warning');
    if (warningElement) {
        warningElement.style.display = show ? 'block' : 'none';
    }
    serverTtsActive = !show;
}

// G·ªçi function t·∫£i danh s√°ch model khi trang t·∫£i xong
loadServerModels();

// C·∫≠p nh·∫≠t model khi thay ƒë·ªïi
serverModelSelect.addEventListener('change', function() {
    selectedServerModel = this.value;
    console.log(`ƒê√£ ch·ªçn model server: ${selectedServerModel}`);
    
    // ƒê·ªìng b·ªô v·ªõi combined select
    if (this.value) {
        combinedVoiceSelect.value = 'server:' + this.value;
    }
    
    // N·∫øu ƒë√£ ch·ªçn model server v√† ƒëang kh√¥ng s·ª≠ d·ª•ng Web Speech
    if (selectedServerModel && !useWebSpeech.checked) {
        console.log('ƒê√£ ch·ªçn gi·ªçng server, s·∫µn s√†ng s·ª≠ d·ª•ng');
    }
});

// Khi chuy·ªÉn tab gi·ªØa browser v√† server
browserTab.addEventListener('click', function() {
    useWebSpeech.checked = true;
});

serverTab.addEventListener('click', function() {
    useWebSpeech.checked = false;
});

// Kh·ªüi t·∫°o SpeechRecognition
function initSpeechRecognition() {
    // Ki·ªÉm tra tr√¨nh duy·ªát h·ªó tr·ª£
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!SpeechRecognition) {
        console.error('Speech recognition not supported in this browser');
        return false;
    }
    
    // Kh·ªüi t·∫°o recognition
    speechRecognition = new SpeechRecognition();
    speechRecognition.lang = 'vi-VN';
    speechRecognition.continuous = false;
    speechRecognition.interimResults = false;
    
    // X·ª≠ l√Ω k·∫øt qu·∫£
    speechRecognition.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        userInput.value = transcript;
    };
    
    speechRecognition.onend = () => {
        toggleListening(false);
        // T·ª± ƒë·ªông g·ª≠i tin nh·∫Øn n·∫øu ƒë√£ nh·∫≠n ƒë∆∞·ª£c vƒÉn b·∫£n
        if (userInput.value.trim()) {
            setTimeout(() => {
                sendMessage();
            }, 500);
        }
    };
    
    speechRecognition.onerror = (event) => {
        console.error('Speech recognition error:', event.error);
        toggleListening(false);
    };
    
    return true;
}

// Toggle tr·∫°ng th√°i nghe
function toggleListening(start = null) {
    if (start === null) {
        start = !isListening;
    }
    
    isListening = start;
    
    if (isListening) {
        if (!speechRecognition) {
            const initialized = initSpeechRecognition();
            if (!initialized) return;
        }
        
        try {
            speechRecognition.start();
            voiceInputButton.classList.add('listening');
            voiceInputButton.innerHTML = '<i class="fas fa-microphone"></i> ƒêang nghe...';
        } catch (error) {
            console.error('Error starting speech recognition:', error);
        }
    } else {
        if (speechRecognition) {
            try {
                speechRecognition.stop();
            } catch (error) {
                console.error('Error stopping speech recognition:', error);
            }
        }
        voiceInputButton.classList.remove('listening');
        voiceInputButton.innerHTML = '<i class="fas fa-microphone"></i>';
    }
}

// T·∫°o n√∫t voice input
const voiceInputButton = document.createElement('button');
voiceInputButton.className = 'btn btn-outline-secondary voice-input-btn';
voiceInputButton.innerHTML = '<i class="fas fa-microphone"></i>';
voiceInputButton.title = 'Nh·∫•n ƒë·ªÉ n√≥i';
voiceInputButton.onclick = function() {
    toggleListening();
};

// Th√™m n√∫t v√†o b√™n c·∫°nh input
document.querySelector('.chat-input').insertBefore(voiceInputButton, document.querySelector('.chat-input button'));

// C·∫≠p nh·∫≠t gi√° tr·ªã hi·ªÉn th·ªã khi ƒëi·ªÅu ch·ªânh
rateRange.addEventListener('input', () => {
    rateValue.textContent = rateRange.value;
});

pitchRange.addEventListener('input', () => {
    pitchValue.textContent = pitchRange.value;
});

function startTalkingAnimation() {
    const mouth = character.querySelector('.robot-mouth');
    const eyes = character.querySelectorAll('.robot-eye');
    
    eyes.forEach(eye => {
        eye.style.animation = 'blink 0.5s infinite';
    });
    
    mouth.style.animation = 'talk 0.3s infinite';
}

function stopTalkingAnimation() {
    const mouth = character.querySelector('.robot-mouth');
    const eyes = character.querySelectorAll('.robot-eye');
    
    eyes.forEach(eye => {
        eye.style.animation = '';
    });
    mouth.style.animation = '';
}

// L·∫•y danh s√°ch voices v√† c·∫≠p nh·∫≠t select
function populateVoiceList() {
    const voices = speechSynthesis.getVoices();
    console.log('ƒêang t·∫£i danh s√°ch gi·ªçng n√≥i...');
    console.log(`T√¨m th·∫•y ${voices.length} gi·ªçng n√≥i`);
    
    // Log t·∫•t c·∫£ voices c√≥ s·∫µn
    voices.forEach((voice, i) => {
        console.log(`Voice ${i}: ${voice.name} (${voice.lang}) - Default: ${voice.default}`);
    });
    
    // Log c√°c gi·ªçng ti·∫øng Vi·ªát
    const viVoices = voices.filter(voice => 
        voice.lang === 'vi-VN' || voice.lang === 'vi' || voice.lang.startsWith('vi-')
    );
    console.log(`T√¨m th·∫•y ${viVoices.length} gi·ªçng ti·∫øng Vi·ªát`);
    viVoices.forEach((voice, i) => {
        console.log(`- Gi·ªçng Vi·ªát ${i}: ${voice.name} (${voice.lang})`);
    });
    
    voiceSelect.innerHTML = '<option value="">Gi·ªçng m·∫∑c ƒë·ªãnh</option>';
    
    let foundVietnameseVoice = false;
    let viVoiceIndex = -1;
    
    // C·∫≠p nh·∫≠t select c≈©
    voices.forEach((voice, index) => {
        const option = document.createElement('option');
        option.value = index;
        
        // ƒê√°nh d·∫•u n·∫øu l√† gi·ªçng ti·∫øng Vi·ªát
        const isVietnamese = voice.lang === 'vi-VN' || voice.lang === 'vi' || voice.lang.startsWith('vi-');
        if (isVietnamese) {
            option.textContent = `üáªüá≥ ${voice.name} (${voice.lang})${voice.default ? ' - Default' : ''}`;
            
            // L∆∞u index c·ªßa gi·ªçng ti·∫øng Vi·ªát ƒë·∫ßu ti√™n
            if (viVoiceIndex === -1) {
                viVoiceIndex = index;
            }
            
            foundVietnameseVoice = true;
        } else {
            option.textContent = `${voice.name} (${voice.lang})${voice.default ? ' - Default' : ''}`;
        }
        
        voiceSelect.appendChild(option);
    });
    
    // C·∫≠p nh·∫≠t combined select cho browser voices
    const browserOptgroup = combinedVoiceSelect.querySelector('optgroup[label="Gi·ªçng tr√¨nh duy·ªát"]');
    if (browserOptgroup) {
        browserOptgroup.innerHTML = ''; // X√≥a placeholders
        voices.forEach((voice, index) => {
            const option = document.createElement('option');
            option.value = 'browser:' + index;
            
            // ƒê√°nh d·∫•u n·∫øu l√† gi·ªçng ti·∫øng Vi·ªát
            const isVietnamese = voice.lang === 'vi-VN' || voice.lang === 'vi' || voice.lang.startsWith('vi-');
            if (isVietnamese) {
                option.textContent = `üáªüá≥ ${voice.name} (${voice.lang})`;
                option.dataset.isVietnamese = 'true';
            } else {
                option.textContent = `${voice.name} (${voice.lang})`;
            }
            
            browserOptgroup.appendChild(option);
        });
    }
    
    // Ch·ªçn gi·ªçng ti·∫øng Vi·ªát ƒë·∫ßu ti√™n n·∫øu c√≥
    if (foundVietnameseVoice && viVoiceIndex !== -1) {
        voiceSelect.value = viVoiceIndex;
        console.log(`T·ª± ƒë·ªông ch·ªçn gi·ªçng ti·∫øng Vi·ªát: ${voices[viVoiceIndex].name}`);
    }
    
    updateCombinedVoiceSelect();
}

// C·∫≠p nh·∫≠t combined voice select d·ª±a tr√™n l·ª±a ch·ªçn hi·ªán t·∫°i
function updateCombinedVoiceSelect() {
    // X√°c ƒë·ªãnh gi√° tr·ªã ƒëang ƒë∆∞·ª£c ch·ªçn
    if (useWebSpeech.checked && voiceSelect.value) {
        // Ch·ªçn browser voice t∆∞∆°ng ·ª©ng
        combinedVoiceSelect.value = 'browser:' + voiceSelect.value;
    } else if (!useWebSpeech.checked && selectedServerModel) {
        // Ch·ªçn server voice t∆∞∆°ng ·ª©ng
        combinedVoiceSelect.value = 'server:' + selectedServerModel;
    }
}

// X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn gi·ªçng t·ª´ dropdown g·ªôp
combinedVoiceSelect.addEventListener('change', function() {
    const selectedValue = this.value;
    if (!selectedValue) return;
    
    if (selectedValue.startsWith('browser:')) {
        // Ch·ªçn gi·ªçng tr√¨nh duy·ªát
        const browserVoiceIndex = selectedValue.split(':')[1];
        voiceSelect.value = browserVoiceIndex;
        
        // ƒê√°nh d·∫•u s·ª≠ d·ª•ng Web Speech API
        useWebSpeech.checked = true;
        
        // Ki·ªÉm tra xem gi·ªçng ƒë∆∞·ª£c ch·ªçn c√≥ ph·∫£i ti·∫øng Vi·ªát kh√¥ng
        const voices = speechSynthesis.getVoices();
        const selectedVoice = voices[parseInt(browserVoiceIndex)];
        if (selectedVoice) {
            const isVietnameseVoice = selectedVoice.lang === 'vi-VN' || 
                                  selectedVoice.lang === 'vi' || 
                                  selectedVoice.lang.startsWith('vi-');
            
            // N·∫øu kh√¥ng ph·∫£i gi·ªçng ti·∫øng Vi·ªát, t·ª± ƒë·ªông t·∫Øt "B·∫Øt bu·ªôc ti·∫øng Vi·ªát"
            if (!isVietnameseVoice && forceVietnamese.checked) {
                forceVietnamese.checked = false;
                console.log("ƒê√£ t·∫Øt t·ª± ƒë·ªông b·∫Øt bu·ªôc ti·∫øng Vi·ªát v√¨ ƒë√£ ch·ªçn gi·ªçng kh√¥ng ph·∫£i ti·∫øng Vi·ªát");
            }
            
            console.log(`ƒê√£ ch·ªçn gi·ªçng tr√¨nh duy·ªát: ${selectedVoice.name} (${selectedVoice.lang})`);
        } else {
            console.log(`ƒê√£ ch·ªçn gi·ªçng tr√¨nh duy·ªát v·ªõi index: ${browserVoiceIndex}`);
        }
    } else if (selectedValue.startsWith('server:')) {
        // Ch·ªçn gi·ªçng server
        const serverModelId = selectedValue.split(':')[1];
        selectedServerModel = serverModelId;
        serverModelSelect.value = serverModelId;
        
        // ƒê√°nh d·∫•u s·ª≠ d·ª•ng Server TTS
        useWebSpeech.checked = false;
        
        console.log(`ƒê√£ ch·ªçn gi·ªçng server: ${serverModelId}`);
    }
    
    // K√≠ch ho·∫°t s·ª± ki·ªán change cho c√°c controls b·ªã ·∫£nh h∆∞·ªüng
    if (useWebSpeech.checked) {
        // K√≠ch ho·∫°t s·ª± ki·ªán change cho voice select
        const event = new Event('change');
        voiceSelect.dispatchEvent(event);
    } else {
        // K√≠ch ho·∫°t s·ª± ki·ªán change cho server model select
        const event = new Event('change');
        serverModelSelect.dispatchEvent(event);
    }
});

// C·∫≠p nh·∫≠t h√†m d·ª´ng ƒë·ªÉ l√†m s·∫°ch watchdog
function stopAllSpeech() {
    // D·ª´ng Web Speech API
    if (speechSynthesis.speaking) {
        speechSynthesis.cancel();
    }
    
    // X√≥a watchdog n·∫øu c√≥
    if (window.speechSynthesisWatchdog) {
        clearInterval(window.speechSynthesisWatchdog);
        window.speechSynthesisWatchdog = null;
    }
    
    // X√≥a utterance chunks n·∫øu c√≥
    if (window.speechSynthesisUtteranceChunks) {
        window.speechSynthesisUtteranceChunks = [];
    }
    
    // D·ª´ng audio t·ª´ server n·∫øu ƒëang ph√°t
    if (currentAudio && !currentAudio.paused) {
        currentAudio.pause();
        currentAudio.currentTime = 0;
        currentAudio = null;
    }
    
    // D·ª´ng animation
            stopTalkingAnimation();
    isSpeaking = false;
    isPaused = false;
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i c√°c n√∫t
    updateSpeechControlButtonsState();
}

// H√†m t·∫°m d·ª´ng speech
function pauseSpeech() {
    if (!isSpeaking || isPaused) return;
    
    console.log("T·∫°m d·ª´ng ph√°t √¢m thanh");
    
    // T·∫°m d·ª´ng Web Speech API
    if (speechSynthesis.speaking) {
        try {
            // Tr∆∞·ªõc khi pause, t·∫Øt watchdog n·∫øu c√≥
            if (window.speechSynthesisWatchdog) {
                clearInterval(window.speechSynthesisWatchdog);
                window.speechSynthesisWatchdog = null;
            }
            
            speechSynthesis.pause();
            console.log("ƒê√£ t·∫°m d·ª´ng Web Speech API");
    } catch (error) {
            console.error("L·ªói khi t·∫°m d·ª´ng Web Speech API:", error);
        }
    }
    
    // T·∫°m d·ª´ng audio t·ª´ server n·∫øu ƒëang ph√°t
    if (currentAudio && !currentAudio.paused) {
        currentAudio.pause();
        console.log("ƒê√£ t·∫°m d·ª´ng audio t·ª´ server");
    }
    
    // T·∫°m d·ª´ng animation
        stopTalkingAnimation();
    isPaused = true;
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i c√°c n√∫t
    updateSpeechControlButtonsState();
}

// H√†m ti·∫øp t·ª•c speech
function resumeSpeech() {
    if (!isPaused) return;
    
    console.log("Ti·∫øp t·ª•c ph√°t √¢m thanh");
    
    // Ti·∫øp t·ª•c Web Speech API
    if (speechSynthesis.paused) {
        try {
            // B·∫Øt ƒë·∫ßu ho·∫°t h√¨nh n√≥i
            startTalkingAnimation();
            
            // Kh·ªüi ƒë·ªông l·∫°i watchdog cho Chrome
            if (window.chrome && !window.speechSynthesisWatchdog) {
                console.log("Kh·ªüi ƒë·ªông l·∫°i watchdog cho Chrome");
                window.speechSynthesisWatchdog = setInterval(() => {
                    if (speechSynthesis.speaking && !speechSynthesis.paused) {
                        console.log("Chrome watchdog: gi·ªØ cho speech ho·∫°t ƒë·ªông");
                        speechSynthesis.pause();
                        setTimeout(() => {
                            speechSynthesis.resume();
                        }, 50);
                    }
                }, 5000);
            }
            
            // Resume speech
            speechSynthesis.resume();
            console.log("ƒê√£ ti·∫øp t·ª•c Web Speech API");
        } catch (error) {
            console.error("L·ªói khi ti·∫øp t·ª•c Web Speech API:", error);
            
            // N·∫øu kh√¥ng th·ªÉ resume, th·ª≠ ph√°t l·∫°i t·ª´ ƒë·∫ßu
            if (speechUtterance) {
                console.log("Th·ª≠ ph√°t l·∫°i utterance t·ª´ ƒë·∫ßu");
                try {
                    speechSynthesis.cancel();
                    speechSynthesis.speak(speechUtterance);
                } catch (speakError) {
                    console.error("Kh√¥ng th·ªÉ ph√°t l·∫°i utterance:", speakError);
                }
            }
        }
    }
    
    // Ti·∫øp t·ª•c audio t·ª´ server n·∫øu ƒëang t·∫°m d·ª´ng
    if (currentAudio && currentAudio.paused) {
        try {
            currentAudio.play();
            console.log("ƒê√£ ti·∫øp t·ª•c audio t·ª´ server");
        } catch (error) {
            console.error("L·ªói khi ti·∫øp t·ª•c ph√°t audio t·ª´ server:", error);
        }
    }
    
    // Ti·∫øp t·ª•c animation
    startTalkingAnimation();
    isPaused = false;
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i c√°c n√∫t
    updateSpeechControlButtonsState();
}

// T·∫°o n√∫t pause speech
const pauseSpeechButton = document.createElement('button');
pauseSpeechButton.className = 'btn btn-warning btn-sm me-2';
pauseSpeechButton.innerHTML = '<i class="fas fa-pause"></i>';
pauseSpeechButton.title = 'T·∫°m d·ª´ng ph√°t √¢m thanh';
pauseSpeechButton.disabled = true; // M·∫∑c ƒë·ªãnh kh√¥ng c√≥ g√¨ ƒë·ªÉ t·∫°m d·ª´ng
pauseSpeechButton.onclick = function() {
    pauseSpeech();
};

// T·∫°o n√∫t resume speech
const resumeSpeechButton = document.createElement('button');
resumeSpeechButton.className = 'btn btn-success btn-sm me-2';
resumeSpeechButton.innerHTML = '<i class="fas fa-play"></i>';
resumeSpeechButton.title = 'Ti·∫øp t·ª•c ph√°t √¢m thanh';
resumeSpeechButton.disabled = true; // M·∫∑c ƒë·ªãnh kh√¥ng c√≥ g√¨ ƒë·ªÉ ti·∫øp t·ª•c
resumeSpeechButton.onclick = function() {
    resumeSpeech();
};

// T·∫°o n√∫t stop speech
const stopSpeechButton = document.createElement('button');
stopSpeechButton.className = 'btn btn-danger btn-sm me-2';
stopSpeechButton.innerHTML = '<i class="fas fa-stop"></i>';
stopSpeechButton.title = 'D·ª´ng ph√°t √¢m thanh';
stopSpeechButton.disabled = true; // M·∫∑c ƒë·ªãnh kh√¥ng c√≥ g√¨ ƒë·ªÉ d·ª´ng
stopSpeechButton.onclick = function() {
    stopAllSpeech();
};

// T·∫°o container cho c√°c n√∫t ƒëi·ªÅu khi·ªÉn
const speechControlsContainer = document.createElement('div');
speechControlsContainer.className = 'speech-controls mt-3 d-flex justify-content-center';
speechControlsContainer.appendChild(resumeSpeechButton);
speechControlsContainer.appendChild(pauseSpeechButton);
speechControlsContainer.appendChild(stopSpeechButton);

// Th√™m container v√†o trang
document.querySelector('.voice-controls .card-body').appendChild(speechControlsContainer);

// C·∫≠p nh·∫≠t tr·∫°ng th√°i c√°c n√∫t ƒëi·ªÅu khi·ªÉn
function updateSpeechControlButtonsState() {
    // N√∫t d·ª´ng (stop)
    stopSpeechButton.disabled = !isSpeaking;
    
    // N√∫t t·∫°m d·ª´ng (pause)
    pauseSpeechButton.disabled = !isSpeaking || isPaused;
    
    // N√∫t ti·∫øp t·ª•c (resume/play)
    resumeSpeechButton.disabled = !isPaused;
}

// ƒê·∫£m b·∫£o voices ƒë∆∞·ª£c t·∫£i ƒë·∫ßy ƒë·ªß
if (speechSynthesis.onvoiceschanged !== undefined) {
    speechSynthesis.onvoiceschanged = function() {
        console.log("Voices ƒë√£ thay ƒë·ªïi, t·∫£i l·∫°i danh s√°ch");
        populateVoiceList();
        
        // L·ªçc l·∫°i c√°c gi·ªçng ti·∫øng Vi·ªát sau khi load danh s√°ch
        findAndSelectVietnameseVoice();
    };
}

// H√†m t√¨m v√† ch·ªçn gi·ªçng ti·∫øng Vi·ªát
function findAndSelectVietnameseVoice() {
    const voices = speechSynthesis.getVoices();
    
    // X√≥a th√¥ng b√°o c≈©
    const oldWarnings = document.querySelectorAll('.voice-warning');
    oldWarnings.forEach(warning => warning.remove());
    
    // T√¨m gi·ªçng ti·∫øng Vi·ªát
    const viVoices = voices.filter(voice => 
        voice.lang === 'vi-VN' || voice.lang === 'vi' || voice.lang.startsWith('vi-')
    );
    
    // N·∫øu kh√¥ng c√≥ gi·ªçng ti·∫øng Vi·ªát, hi·ªÉn th·ªã c·∫£nh b√°o
    if (viVoices.length === 0) {
        console.warn("Kh√¥ng t√¨m th·∫•y gi·ªçng ti·∫øng Vi·ªát!");
        const warning = document.createElement('div');
        warning.className = 'alert alert-warning mt-2 voice-warning';
        warning.innerHTML = `
            <strong>Ch√∫ √Ω:</strong> Kh√¥ng t√¨m th·∫•y gi·ªçng ti·∫øng Vi·ªát. 
            H√£y c√†i ƒë·∫∑t th√™m gi·ªçng trong c√†i ƒë·∫∑t h·ªá th·ªëng ho·∫∑c s·ª≠ d·ª•ng TTS Server.
        `;
        
        document.getElementById('browser-tts').appendChild(warning);
        return null;
    }
    
    // T√¨m th·∫•y √≠t nh·∫•t m·ªôt gi·ªçng ti·∫øng Vi·ªát
    console.log(`T√¨m th·∫•y ${viVoices.length} gi·ªçng ti·∫øng Vi·ªát:`);
    viVoices.forEach((voice, i) => {
        console.log(`${i+1}. ${voice.name} (${voice.lang})`);
    });
    
    return viVoices[0]; // Tr·∫£ v·ªÅ gi·ªçng ƒë·∫ßu ti√™n t√¨m ƒë∆∞·ª£c
}

// Th√™m l·∫Øng nghe s·ª± ki·ªán khi chuy·ªÉn tab
document.getElementById('browser-tab').addEventListener('click', () => {
    // ƒê·∫£m b·∫£o voice list ƒë√£ ƒë∆∞·ª£c load
    setTimeout(() => {
        findAndSelectVietnameseVoice();
    }, 500);
});

// G·ªçi ngay l·∫ßn ƒë·∫ßu ƒë·ªÉ t·∫£i voices n·∫øu ƒë√£ c√≥ s·∫µn
populateVoiceList();
findAndSelectVietnameseVoice();

// Th√™m n√∫t ƒë·ªÉ s·ª≠ d·ª•ng streaming
const useStreamingButton = document.createElement('button');
useStreamingButton.className = 'btn btn-success mt-2 ms-2';
useStreamingButton.textContent = 'S·ª≠ d·ª•ng Streaming TTS';
useStreamingButton.onclick = function() {
    sendStreamMessage();
};

// Th√™m n√∫t v√†o trang
document.querySelector('.voice-controls .card-body').appendChild(useStreamingButton);

// K·∫øt n·ªëi n√∫t x√≥a trong header chat
document.getElementById('clear-chat-btn').addEventListener('click', clearChatMessages);

// C·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c hi·ªÉn th·ªã tin nh·∫Øn ƒë·ªÉ c√≥ giao di·ªán ƒë·∫πp h∆°n
function addMessageToChat(sender, message, isError = false) {
    const messageElement = document.createElement('div');
    messageElement.className = `message ${sender.toLowerCase()}`;
    
    const contentElement = document.createElement('div');
    contentElement.className = 'content';
    
    if (isError) {
        contentElement.classList.add('error');
        contentElement.innerHTML = message;
    } else if (sender === 'System') {
        // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho tin nh·∫Øn h·ªá th·ªëng
        contentElement.classList.add('system-message');
        contentElement.innerHTML = message;
        messageElement.classList.add('system');
    } else {
        contentElement.innerHTML = message;
    }
    
    messageElement.appendChild(contentElement);
    chatMessages.appendChild(messageElement);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

// C·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c sendMessage
async function sendMessage() {
    const message = userInput.value.trim();
    if (!message) return;

    // D·ª´ng √¢m thanh n·∫øu ƒëang ph√°t
    stopAllSpeech();

    // Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v·ªõi giao di·ªán ƒë·∫πp h∆°n
    addMessageToChat('User', message);
    userInput.value = '';

    startTalkingAnimation();
    isSpeaking = true;
    updateSpeechControlButtonsState();

    try {
        const response = await fetch('/virtual-character/generate-response', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ message })
        });

        const data = await response.json();
        if (data.error) {
            throw new Error(data.error);
        }

        // Th√™m tin nh·∫Øn robot v·ªõi giao di·ªán ƒë·∫πp h∆°n
        addMessageToChat('Robot', data.response);
        
        // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ d·ª´ng trong khi ch·ªù ph·∫£n h·ªìi
        if (!isSpeaking) {
            return;
        }
        
        // ƒê·∫£m b·∫£o voice selection nh·∫•t qu√°n tr∆∞·ªõc khi ph√°t √¢m thanh
        if (useWebSpeech.checked) {
            ensureConsistentVoiceSelection();
        }
        
        console.log("Ph√°t √¢m thanh cho ph·∫£n h·ªìi v·ªõi ph∆∞∆°ng th·ª©c: " + 
                  (useWebSpeech.checked ? "Web Speech API" : "Server TTS"));
        
        // Lu√¥n s·ª≠ d·ª•ng streamingTTS ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªìng nh·∫•t gi·ªØa c√°c ph∆∞∆°ng th·ª©c
        streamingTTS(data.response);
    } catch (error) {
        console.error('Error:', error);
        // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
        addMessageToChat('Robot', 'Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra.', true);
        stopTalkingAnimation();
        isSpeaking = false;
        updateSpeechControlButtonsState();
    }
}

userInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        sendMessage();
    }
});

// H√†m ph√°t √¢m thanh t·ª´ server
async function speakWithServerTTS(text) {
    return new Promise(async (resolve, reject) => {
        try {
            // Lo·∫°i b·ªè HTML tags n·∫øu c√≥
            const cleanText = stripHtml(text);
            
            // Ki·ªÉm tra n·∫øu ƒë√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng
            if (!isSpeaking) {
                resolve();
                return;
            }
            
            // N·∫øu server TTS ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† c√≥ v·∫•n ƒë·ªÅ, chuy·ªÉn ngay sang Web Speech API
            if (!serverTtsActive) {
                console.log('Server TTS ƒë√£ b·ªã v√¥ hi·ªáu h√≥a, s·ª≠ d·ª•ng Web Speech API');
                speakWithBrowserTTS(cleanText, resolve);
                return;
            }

            console.log(`Y√™u c·∫ßu TTS t·ª´ server cho text: "${cleanText}", model: ${selectedServerModel}`);
            const response = await fetch('/virtual-character/tts/synthesize', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ 
                    text: cleanText,
                    modelId: selectedServerModel
                })
            });

            // Ki·ªÉm tra l·∫°i n·∫øu ƒë√£ d·ª´ng trong khi ch·ªù server ph·∫£n h·ªìi
            if (!isSpeaking) {
                resolve();
                return;
            }

            if (!response.ok) {
                console.error(`Server tr·∫£ v·ªÅ l·ªói: ${response.status} ${response.statusText}`);
                throw new Error('TTS request failed');
            }

            const audioBlob = await response.blob();
            console.log(`ƒê√£ nh·∫≠n ph·∫£n h·ªìi t·ª´ server, k√≠ch th∆∞·ªõc blob: ${audioBlob.size} bytes`);
            
            // Ki·ªÉm tra l·∫°i n·∫øu ƒë√£ d·ª´ng
            if (!isSpeaking) {
                resolve();
                return;
            }
            
            // Ki·ªÉm tra k√≠ch th∆∞·ªõc blob - n·∫øu qu√° nh·ªè c√≥ th·ªÉ l√† fallback audio
            if (audioBlob.size < 1000) {
                console.warn('Nh·∫≠n ƒë∆∞·ª£c audio r·ªóng t·ª´ server, chuy·ªÉn sang Web Speech API');
                
                // ƒê√°nh d·∫•u server TTS c√≥ v·∫•n ƒë·ªÅ
                serverTtsActive = false;
                showServerTtsWarning(true);
                
                // T·ª± ƒë·ªông chuy·ªÉn sang Web Speech API
                if (!useWebSpeech.checked) {
                    console.log('T·ª± ƒë·ªông k√≠ch ho·∫°t Web Speech API');
                    useWebSpeech.checked = true;
                    // Chuy·ªÉn tab sang browser
                    const browserTabButton = document.getElementById('browser-tab');
                    if (browserTabButton) {
                        browserTabButton.click();
                    }
                }
                
                // Ki·ªÉm tra l·∫°i n·∫øu ƒë√£ d·ª´ng
                if (!isSpeaking) {
                    resolve();
                    return;
                }
                
                // Ph√°t √¢m thanh s·ª≠ d·ª•ng Web Speech API
                speakWithBrowserTTS(cleanText, resolve);
                return;
            }
            
            const audioUrl = URL.createObjectURL(audioBlob);
            const audio = new Audio(audioUrl);
            currentAudio = audio; // L∆∞u l·∫°i ƒë·ªÉ c√≥ th·ªÉ d·ª´ng/t·∫°m d·ª´ng n·∫øu c·∫ßn
            
            console.log('Ph√°t √¢m thanh t·ª´ server');
            audio.onended = () => {
                URL.revokeObjectURL(audioUrl);
                currentAudio = null;
                console.log('K·∫øt th√∫c ph√°t √¢m thanh t·ª´ server');
                isSpeaking = false;
                isPaused = false;
                updateSpeechControlButtonsState();
                resolve();
            };
            
            audio.onerror = (error) => {
                URL.revokeObjectURL(audioUrl);
                currentAudio = null;
                console.error('Audio playback error:', error);
                isSpeaking = false;
                isPaused = false;
                updateSpeechControlButtonsState();
                
                // Ki·ªÉm tra l·∫°i n·∫øu ƒë√£ d·ª´ng
                if (!isSpeaking) {
                    resolve();
                    return;
                }
                
                // Fallback to Web Speech API if audio fails to play
                console.log('Fallback to Web Speech API due to audio error');
                speakWithBrowserTTS(cleanText, resolve);
            };

            await audio.play();
        } catch (error) {
            console.error('Server TTS Error:', error);
            
            // ƒê√°nh d·∫•u server TTS c√≥ v·∫•n ƒë·ªÅ
            serverTtsActive = false;
            showServerTtsWarning(true);
            
            // Ki·ªÉm tra l·∫°i n·∫øu ƒë√£ d·ª´ng
            if (!isSpeaking) {
                resolve();
                return;
            }
            
            // N·∫øu server-side TTS th·∫•t b·∫°i, s·ª≠ d·ª•ng Web Speech API
            console.log('Fallback to Web Speech API due to server error');
            speakWithBrowserTTS(text, resolve);
        }
    });
}

// H√†m m·ªõi ƒë·ªÉ ph√°t √¢m thanh v·ªõi Web Speech API
function speakWithBrowserTTS(text, callback) {
    // Lo·∫°i b·ªè HTML tags n·∫øu c√≥
    const cleanText = stripHtml(text);
    
    // T·∫°o utterance
    const utterance = new SpeechSynthesisUtterance(cleanText);
    
    // L·∫•y voice ƒë√£ ch·ªçn
    const voices = speechSynthesis.getVoices();
    console.log(`Browser TTS: Danh s√°ch gi·ªçng n√≥i c√≥ s·∫µn: ${voices.length}`);
    
    // T√¨m v√† log c√°c gi·ªçng ti·∫øng Vi·ªát - v·∫´n h·ªØu √≠ch cho debug
    const vietnameseVoices = voices.filter(voice => 
        voice.lang === 'vi-VN' || voice.lang === 'vi' || voice.lang.startsWith('vi-')
    );
    console.log(`Browser TTS: Gi·ªçng ti·∫øng Vi·ªát c√≥ s·∫µn: ${vietnameseVoices.length}`);
    
    // ∆Øu ti√™n gi·ªçng ti·∫øng Vi·ªát
    let voiceFound = false;
    
    // 1. D√πng voice ƒë√£ ƒë∆∞·ª£c ch·ªçn t·ª´ dropdown b·∫•t k·ªÉ ng√¥n ng·ªØ g√¨
    if (voiceSelect.value) {
        const selectedVoiceIndex = parseInt(voiceSelect.value);
        if (!isNaN(selectedVoiceIndex) && selectedVoiceIndex >= 0 && selectedVoiceIndex < voices.length) {
            const selectedVoice = voices[selectedVoiceIndex];
            utterance.voice = selectedVoice;
            
            // S·ª≠ d·ª•ng ng√¥n ng·ªØ c·ªßa gi·ªçng ƒë∆∞·ª£c ch·ªçn
            utterance.lang = selectedVoice.lang;
            console.log(`Browser TTS: S·ª≠ d·ª•ng gi·ªçng ƒë√£ ch·ªçn: ${selectedVoice.name} (${selectedVoice.lang})`);
            voiceFound = true;
        }
    } 
    
    // 2. N·∫øu kh√¥ng c√≥ ch·ªçn tr√™n UI v√† b·∫Øt bu·ªôc ti·∫øng Vi·ªát, t√¨m gi·ªçng ti·∫øng Vi·ªát ƒë·∫ßu ti√™n
    if (!voiceFound && forceVietnamese.checked && vietnameseVoices.length > 0) {
        utterance.voice = vietnameseVoices[0];
        utterance.lang = vietnameseVoices[0].lang;
        console.log(`Browser TTS: S·ª≠ d·ª•ng gi·ªçng ti·∫øng Vi·ªát ƒë·∫ßu ti√™n t√¨m ƒë∆∞·ª£c: ${utterance.voice.name}`);
        voiceFound = true;
    } else if (!voiceFound) {
        // Kh√¥ng c√≥ gi·ªçng ƒë∆∞·ª£c ch·ªçn, s·ª≠ d·ª•ng gi·ªçng m·∫∑c ƒë·ªãnh c·ªßa tr√¨nh duy·ªát
        console.log(`Browser TTS: Kh√¥ng c√≥ gi·ªçng ƒë∆∞·ª£c ch·ªçn, s·ª≠ d·ª•ng gi·ªçng m·∫∑c ƒë·ªãnh`);
        // Kh√¥ng c·∫ßn ƒë·∫∑t lang ·ªü ƒë√¢y ƒë·ªÉ tr√¨nh duy·ªát t·ª± ch·ªçn language m·∫∑c ƒë·ªãnh
    }
    
    // C·∫≠p nh·∫≠t rate v√† pitch t·ª´ sliders
    utterance.rate = parseFloat(rateRange.value);
    utterance.pitch = parseFloat(pitchRange.value);
    utterance.volume = 1.0; // ƒê·∫£m b·∫£o √¢m l∆∞·ª£ng t·ªëi ƒëa
    
    utterance.onend = () => {
        console.log('Browser TTS: K·∫øt th√∫c ph√°t √¢m thanh');
        if (callback) callback();
    };
    
    utterance.onerror = (error) => {
        console.error('Browser TTS: L·ªói ph√°t √¢m thanh:', error);
        if (callback) callback();
    };
    
    // L∆∞u utterance hi·ªán t·∫°i ƒë·ªÉ c√≥ th·ªÉ pause/resume
    speechUtterance = utterance;
    
    console.log(`Browser TTS: Ph√°t √¢m thanh v·ªõi gi·ªçng: ${utterance.voice?.name || 'm·∫∑c ƒë·ªãnh'}, ng√¥n ng·ªØ: ${utterance.lang || 'm·∫∑c ƒë·ªãnh'}, ƒë·ªô d√†i: ${cleanText.length} k√Ω t·ª±`);
    
    // ƒê·∫£m b·∫£o h·ªßy c√°c speech tr∆∞·ªõc ƒë√≥
    speechSynthesis.cancel();
    
    // Kh·ªüi ƒë·ªông watchdog cho Chrome (gi√∫p ph√°t vƒÉn b·∫£n d√†i)
    if (window.chrome) {
        // Kh·ªüi ƒë·ªông watchdog ƒë·ªÉ tr√°nh Chrome t·ª± ƒë·ªông d·ª´ng sau 15 gi√¢y
        if (window.speechSynthesisWatchdog) {
            clearInterval(window.speechSynthesisWatchdog);
        }
        
        window.speechSynthesisWatchdog = setInterval(() => {
            if (speechSynthesis.speaking && !speechSynthesis.paused) {
                console.log("Chrome watchdog: gi·ªØ cho speech ho·∫°t ƒë·ªông");
                speechSynthesis.pause();
                setTimeout(() => {
                    speechSynthesis.resume();
                }, 50);
            }
        }, 5000);
    }
    
    // Ph√°t √¢m thanh
    speechSynthesis.speak(utterance);
}

async function fallbackServerTTS(text) {
    try {
        startTalkingAnimation();
        isSpeaking = true;
        updateSpeechControlButtonsState();
        await speakWithServerTTS(text);
        // Ch·ªâ d·ª´ng animation n·∫øu v·∫´n ƒëang trong tr·∫°ng th√°i n√≥i
        if (isSpeaking) {
            stopTalkingAnimation();
            isSpeaking = false;
            updateSpeechControlButtonsState();
        }
    } catch (error) {
        console.error('TTS Error:', error);
        stopTalkingAnimation();
        isSpeaking = false;
        updateSpeechControlButtonsState();
    }
}

// Th√™m n√∫t ƒë·ªÉ test streaming TTS
const testStreamingButton = document.createElement('button');
testStreamingButton.className = 'btn btn-outline-primary mt-2';
testStreamingButton.textContent = 'Test HTML Cleaning & TTS';
testStreamingButton.onclick = function() {
    const testText = `<div class="test-content">
    <p>Xin ch√†o! R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n! T√¥i l√† <strong>Nora</strong> l√† tr·ª£ l√Ω ·∫£o c√≥ th·ªÉ tr·∫£ l·ªùi <em>c√°c c√¢u h·ªèi</em> c·ªßa b·∫°n.</p>
    </div>`;
    
    // Hi·ªÉn th·ªã tin nh·∫Øn v·ªõi HTML
    addMessageToChat('Robot', testText);
    
    // Ph√°t √¢m vƒÉn b·∫£n ƒë√£ x·ª≠ l√Ω
    streamingTTS(testText);
};

// Th√™m n√∫t v√†o trang
document.querySelector('.voice-controls .card-body').appendChild(testStreamingButton);

// T·∫°o n√∫t x√≥a n·ªôi dung chat
// const clearChatButton = document.createElement('button');
// clearChatButton.className = 'btn btn-secondary mt-2 ms-2';
// clearChatButton.innerHTML = '<i class="fas fa-trash"></i> X√≥a chat';
// clearChatButton.title = 'X√≥a to√†n b·ªô n·ªôi dung chat';
// clearChatButton.onclick = function() {
//     clearChatMessages();
// };

// Th√™m n√∫t v√†o trang
// document.querySelector('.voice-controls .card-body').appendChild(clearChatButton);

// H√†m x√≥a n·ªôi dung chat
function clearChatMessages() {
    // D·ª´ng b·∫•t k·ª≥ √¢m thanh n√†o ƒëang ph√°t
    stopAllSpeech();
    
    // X√≥a n·ªôi dung chat
    chatMessages.innerHTML = '';
    
    // Th√™m th√¥ng b√°o x√≥a th√†nh c√¥ng
    const clearNotice = document.createElement('div');
    clearNotice.className = 'text-center text-muted my-3';
    clearNotice.innerHTML = '<i class="fas fa-check-circle"></i> ƒê√£ x√≥a l·ªãch s·ª≠ chat';
    chatMessages.appendChild(clearNotice);
    
    // T·ª± ƒë·ªông ·∫©n th√¥ng b√°o sau 3 gi√¢y
    setTimeout(() => {
        if (clearNotice.parentNode === chatMessages) {
            chatMessages.removeChild(clearNotice);
        }
    }, 3000);
}

// X·ª≠ l√Ω streaming response v·ªõi Server-Sent Events
async function sendStreamMessage() {
    const message = userInput.value.trim();
    if (!message) return;

    stopAllSpeech();

    addMessageToChat('User', message);
    userInput.value = '';
    
    // T·∫°o container cho response
    const robotMessageElement = document.createElement('div');
    robotMessageElement.className = 'message robot';
    
    const contentElement = document.createElement('div');
    contentElement.className = 'content';
    contentElement.id = 'streaming-response-container';
    
    const streamingResponseSpan = document.createElement('span');
    streamingResponseSpan.id = 'streaming-response';
    
    contentElement.appendChild(streamingResponseSpan);
    robotMessageElement.appendChild(contentElement);
    chatMessages.appendChild(robotMessageElement);
    
    // Start animation
    startTalkingAnimation();
    isSpeaking = true;
    updateSpeechControlButtonsState();
    
    try {
        const eventSource = new EventSource(`/virtual-character/generate-stream-response?message=${encodeURIComponent(message)}`);
        
        let fullResponse = '';
        let currentSentence = '';
        
        // X·ª≠ l√Ω t·ª´ng chunk d·ªØ li·ªáu
        eventSource.onmessage = async function(event) {
            // Ki·ªÉm tra n·∫øu ƒë√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng
            if (!isSpeaking) {
                eventSource.close();
                return;
            }
            
            if (event.data === '[DONE]') {
                eventSource.close();
                if (isSpeaking) {
                    stopTalkingAnimation();
                    isSpeaking = false;
                    updateSpeechControlButtonsState();
                }
                return;
            }
            
            try {
                const data = JSON.parse(event.data);
                
                if (data.error) {
                    throw new Error(data.error);
                }
                
                if (data.chunk) {
                    fullResponse += data.chunk;
                    currentSentence += data.chunk;
                    
                    // C·∫≠p nh·∫≠t n·ªôi dung hi·ªÉn th·ªã
                    streamingResponseSpan.textContent = fullResponse;
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                    
                    // Ki·ªÉm tra n·∫øu ƒë√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng
                    if (!isSpeaking) {
                        eventSource.close();
                        return;
                    }
                    
                    // Ki·ªÉm tra xem c√≥ c√¢u ho√†n ch·ªânh kh√¥ng (k·∫øt th√∫c b·∫±ng d·∫•u ch·∫•m, ch·∫•m h·ªèi, ch·∫•m than)
                    if (/[.!?](\s|$)/.test(data.chunk)) {
                        console.log(`C√¢u ho√†n ch·ªânh ƒë∆∞·ª£c ph√°t hi·ªán: "${currentSentence.trim()}"`);
                        
                        // Lo·∫°i b·ªè HTML tags tr∆∞·ªõc khi x·ª≠ l√Ω
                        const cleanSentence = stripHtml(currentSentence.trim());
                        
                        if (cleanSentence) {
                            // S·ª≠ d·ª•ng h√†m chung ƒë·ªÉ ƒë·∫£m b·∫£o nh·∫•t qu√°n v·ªõi h√†m streamingTTS
                            if (useWebSpeech.checked) {
                                // Ph√°t √¢m c√¢u hi·ªán t·∫°i v·ªõi Web Speech API
                                speakWithBrowserTTS(cleanSentence);
                            } else {
                                // Ph√°t √¢m c√¢u hi·ªán t·∫°i v·ªõi Server API
                                speakWithServerTTS(cleanSentence).catch(error => {
                                    console.error('Server TTS error during streaming:', error);
                                });
                            }
                        }
                        
                        // Reset current sentence
                        currentSentence = '';
                    }
                }
            } catch (error) {
                console.error('Error parsing stream chunk:', error);
            }
        };
        
        // X·ª≠ l√Ω l·ªói
        eventSource.onerror = function(error) {
            console.error('EventSource error:', error);
            eventSource.close();
            
            if (isSpeaking) {
                stopTalkingAnimation();
                isSpeaking = false;
                updateSpeechControlButtonsState();
            }
            
            // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói k·∫øt n·ªëi
            const errorElement = document.createElement('span');
            errorElement.className = 'text-danger';
            errorElement.textContent = ' [L·ªói k·∫øt n·ªëi]';
            streamingResponseSpan.appendChild(errorElement);
        };
        
    } catch (error) {
        console.error('Error:', error);
        // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
        addMessageToChat('Robot', 'Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra.', true);
        
        if (isSpeaking) {
            stopTalkingAnimation();
            isSpeaking = false;
            updateSpeechControlButtonsState();
        }
    }
}

// Force load voices ngay khi trang load
function forceLoadVoices() {
    return new Promise((resolve) => {
        let voices = speechSynthesis.getVoices();
        if (voices.length !== 0) {
            console.log('ƒê√£ load voices ngay l·∫≠p t·ª©c, c√≥ s·∫µn:', voices.length);
            populateVoiceList();
            ensureConsistentVoiceSelection();
            resolve(voices);
            return;
        }

        // Chrome needs a little help...
        let uttr = new SpeechSynthesisUtterance("");
        uttr.onend = () => {
            voices = speechSynthesis.getVoices();
            console.log('ƒê√£ force load voices, c√≥:', voices.length);
            populateVoiceList();
            ensureConsistentVoiceSelection();
            resolve(voices);
        };
        speechSynthesis.speak(uttr);
        
        // Th√™m timeout ƒë·ªÉ ƒë·∫£m b·∫£o voices ƒë∆∞·ª£c load
        setTimeout(() => {
            if (voices.length === 0) {
                voices = speechSynthesis.getVoices();
                if (voices.length > 0) {
                    console.log('ƒê√£ load voices sau timeout, c√≥:', voices.length);
                    populateVoiceList();
                    ensureConsistentVoiceSelection();
                    resolve(voices);
                } else {
                    console.warn('Kh√¥ng th·ªÉ load voices sau timeout');
                    resolve([]);
                }
            }
        }, 1000);
    });
}

// C·∫≠p nh·∫≠t kh·ªüi t·∫°o
(async function initializeVoices() {
    console.log("Kh·ªüi t·∫°o h·ªá th·ªëng TTS...");
    
    // Load voices
    await forceLoadVoices();
    
    // Test kh·∫£ nƒÉng ph√°t √¢m ti·∫øng Vi·ªát
    console.log("Ki·ªÉm tra kh·∫£ nƒÉng ph√°t √¢m ti·∫øng Vi·ªát...");
    const hasVietnameseVoice = ensureConsistentVoiceSelection();
    
    // N·∫øu kh√¥ng c√≥ gi·ªçng ti·∫øng Vi·ªát v√† ƒëang b·∫Øt bu·ªôc ti·∫øng Vi·ªát,
    // t·ª± ƒë·ªông chuy·ªÉn sang server TTS
    if (!hasVietnameseVoice && forceVietnamese.checked) {
        console.log("Kh√¥ng t√¨m th·∫•y gi·ªçng ti·∫øng Vi·ªát, t·ª± ƒë·ªông chuy·ªÉn sang server TTS");
        useWebSpeech.checked = false;
        
        // Chuy·ªÉn tab
        const serverTabButton = document.getElementById('server-tab');
        if (serverTabButton) {
            serverTabButton.click();
        }
    }
    
    console.log("H·ªá th·ªëng TTS ƒë√£ s·∫µn s√†ng");
})();

// H√†m ƒë·ªÉ ƒë·∫£m b·∫£o ch·ªçn gi·ªçng ti·∫øng Vi·ªát ph√π h·ª£p
function ensureConsistentVoiceSelection() {
    // L·∫•y danh s√°ch voices hi·ªán t·∫°i
    const voices = speechSynthesis.getVoices();
    
    // X√≥a c√°c c·∫£nh b√°o c≈©
    const oldWarnings = document.querySelectorAll('.voice-warning');
    oldWarnings.forEach(warning => warning.remove());
    
    // T√¨m gi·ªçng ti·∫øng Vi·ªát
    const vietnameseVoices = voices.filter(voice => 
        voice.lang === 'vi-VN' || voice.lang === 'vi' || voice.lang.startsWith('vi-')
    );
    
    console.log(`Ki·ªÉm tra voice selection: T√¨m th·∫•y ${vietnameseVoices.length} gi·ªçng ti·∫øng Vi·ªát`);
    
    // Ch·ªâ th·ª±c hi·ªán chuy·ªÉn ƒë·ªïi gi·ªçng n·∫øu b·∫Øt bu·ªôc ti·∫øng Vi·ªát ƒë∆∞·ª£c b·∫≠t
    if (forceVietnamese.checked) {
        console.log("Ch·∫ø ƒë·ªô b·∫Øt bu·ªôc ti·∫øng Vi·ªát ƒëang b·∫≠t");
        
        // Ki·ªÉm tra n·∫øu ƒëang ch·ªçn gi·ªçng kh√¥ng ph·∫£i ti·∫øng Vi·ªát
        if (voiceSelect.value) {
            const selectedVoice = voices[parseInt(voiceSelect.value)];
            if (selectedVoice) {
                const isVietnameseVoice = selectedVoice.lang === 'vi-VN' || 
                                        selectedVoice.lang === 'vi' || 
                                        selectedVoice.lang.startsWith('vi-');
                
                // N·∫øu kh√¥ng ph·∫£i gi·ªçng ti·∫øng Vi·ªát, t·ª± ƒë·ªông chuy·ªÉn
                if (!isVietnameseVoice && vietnameseVoices.length > 0) {
                    // T√¨m index c·ªßa gi·ªçng ti·∫øng Vi·ªát ƒë·∫ßu ti√™n trong danh s√°ch
                    const firstVietnameseVoiceIndex = voices.findIndex(voice => 
                        voice.lang === 'vi-VN' || voice.lang === 'vi' || voice.lang.startsWith('vi-')
                    );
                    
                    if (firstVietnameseVoiceIndex !== -1) {
                        voiceSelect.value = firstVietnameseVoiceIndex;
                        console.log(`ƒê√£ t·ª± ƒë·ªông chuy·ªÉn sang gi·ªçng ti·∫øng Vi·ªát: ${voices[firstVietnameseVoiceIndex].name}`);
                        
                        // ƒê·ªìng th·ªùi c·∫≠p nh·∫≠t combined select
                        combinedVoiceSelect.value = 'browser:' + firstVietnameseVoiceIndex;
                    }
                }
            }
        } else if (vietnameseVoices.length > 0) {
            // N·∫øu ch∆∞a ch·ªçn gi·ªçng n√†o v√† c√≥ gi·ªçng ti·∫øng Vi·ªát, t·ª± ƒë·ªông ch·ªçn gi·ªçng ti·∫øng Vi·ªát ƒë·∫ßu ti√™n
            const firstVietnameseVoiceIndex = voices.findIndex(voice => 
                voice.lang === 'vi-VN' || voice.lang === 'vi' || voice.lang.startsWith('vi-')
            );
            
            if (firstVietnameseVoiceIndex !== -1) {
                voiceSelect.value = firstVietnameseVoiceIndex;
                console.log(`ƒê√£ t·ª± ƒë·ªông ch·ªçn gi·ªçng ti·∫øng Vi·ªát: ${voices[firstVietnameseVoiceIndex].name}`);
                
                // ƒê·ªìng th·ªùi c·∫≠p nh·∫≠t combined select
                combinedVoiceSelect.value = 'browser:' + firstVietnameseVoiceIndex;
            }
        }
        
        // Hi·ªÉn th·ªã c·∫£nh b√°o n·∫øu kh√¥ng t√¨m th·∫•y gi·ªçng ti·∫øng Vi·ªát v√† ƒëang b·∫Øt bu·ªôc ti·∫øng Vi·ªát
        if (vietnameseVoices.length === 0) {
            const warning = document.createElement('div');
            warning.className = 'alert alert-warning mt-2 voice-warning';
            warning.innerHTML = `
                <strong>Ch√∫ √Ω:</strong> Kh√¥ng t√¨m th·∫•y gi·ªçng ti·∫øng Vi·ªát m·∫∑c d√π ƒë√£ b·∫≠t "B·∫Øt bu·ªôc ti·∫øng Vi·ªát". 
                H√£y c√†i ƒë·∫∑t th√™m gi·ªçng trong c√†i ƒë·∫∑t h·ªá th·ªëng ho·∫∑c s·ª≠ d·ª•ng server TTS.
            `;
            
            document.getElementById('browser-tts').appendChild(warning);
        }
    } else {
        console.log("Ch·∫ø ƒë·ªô b·∫Øt bu·ªôc ti·∫øng Vi·ªát ƒëang t·∫Øt, cho ph√©p s·ª≠ d·ª•ng b·∫•t k·ª≥ gi·ªçng n√†o");
    }
    
    return vietnameseVoices.length > 0;
}

// B·∫Øt s·ª± ki·ªán khi thay ƒë·ªïi c√¥ng t·∫Øc b·∫Øt bu·ªôc ti·∫øng Vi·ªát
forceVietnamese.addEventListener('change', function() {
    console.log(`C√¥ng t·∫Øc "B·∫Øt bu·ªôc ti·∫øng Vi·ªát" ƒë√£ thay ƒë·ªïi: ${this.checked ? 'B·∫≠t' : 'T·∫Øt'}`);
    ensureConsistentVoiceSelection();
});

// B·∫Øt s·ª± ki·ªán khi thay ƒë·ªïi gi·ªçng ƒë√£ ch·ªçn
voiceSelect.addEventListener('change', function() {
    const selectedIndex = this.value;
    if (selectedIndex) {
        const voices = speechSynthesis.getVoices();
        const selectedVoice = voices[parseInt(selectedIndex)];
        console.log(`ƒê√£ ch·ªçn gi·ªçng: ${selectedVoice.name} (${selectedVoice.lang})`);
        
        // Ki·ªÉm tra n·∫øu ƒëang b·∫Øt bu·ªôc ti·∫øng Vi·ªát nh∆∞ng l·∫°i ch·ªçn gi·ªçng kh√¥ng ph·∫£i ti·∫øng Vi·ªát
        const isVietnameseVoice = selectedVoice.lang === 'vi-VN' || 
                                selectedVoice.lang === 'vi' || 
                                selectedVoice.lang.startsWith('vi-');
        
        if (forceVietnamese.checked && !isVietnameseVoice) {
            // Hi·ªÉn th·ªã c·∫£nh b√°o
            const warning = document.createElement('div');
            warning.className = 'alert alert-warning mt-2 voice-warning';
            warning.innerHTML = `
                <strong>Ch√∫ √Ω:</strong> B·∫°n ƒë√£ ch·ªçn gi·ªçng kh√¥ng ph·∫£i ti·∫øng Vi·ªát (${selectedVoice.lang}) 
                trong khi ƒëang b·∫≠t "B·∫Øt bu·ªôc ti·∫øng Vi·ªát". Ti·∫øng Vi·ªát c√≥ th·ªÉ kh√¥ng ƒë∆∞·ª£c ph√°t √¢m ƒë√∫ng.
            `;
            
            // X√≥a c√°c c·∫£nh b√°o c≈©
            const oldWarnings = document.querySelectorAll('.voice-warning');
            oldWarnings.forEach(w => w.remove());
            
            // Th√™m c·∫£nh b√°o m·ªõi
            document.getElementById('browser-tts').appendChild(warning);
        } else {
            // X√≥a c√°c c·∫£nh b√°o c≈©
            const oldWarnings = document.querySelectorAll('.voice-warning');
            oldWarnings.forEach(w => w.remove());
        }
    }
});

// S·ª± ki·ªán chuy·ªÉn ƒë·ªïi gi·ªØa Web Speech v√† Server TTS
useWebSpeech.addEventListener('change', function() {
    console.log(`Chuy·ªÉn ƒë·ªïi ph∆∞∆°ng th·ª©c TTS: ${this.checked ? 'Web Speech API' : 'Server TTS'}`);
    
    if (this.checked) {
        ensureConsistentVoiceSelection();
    }
    
    // C·∫≠p nh·∫≠t combined select sau khi thay ƒë·ªïi
    updateCombinedVoiceSelect();
});

// Th√™m CSS cho tin nh·∫Øn system
const systemMessageStyle = document.createElement('style');
systemMessageStyle.textContent = `
    .message.system {
        margin: 10px 0;
        width: 100%;
    }
    
    .message.system .content {
        width: 100%;
        max-width: 100%;
        background-color: #f8f9fa;
        border-radius: 8px;
        border-left: 4px solid #17a2b8;
    }
    
    .message.system .content pre {
        max-height: 150px;
        overflow-y: auto;
        font-size: 0.85rem;
    }
`;
document.head.appendChild(systemMessageStyle);

// Th√™m CSS cho select g·ªôp
const combinedSelectStyle = document.createElement('style');
combinedSelectStyle.textContent = `
    #combined-voice-select {
        font-size: 15px;
        padding: 8px 12px;
        border-radius: 6px;
        border: 1px solid #ced4da;
        transition: all 0.2s;
    }
    
    #combined-voice-select:focus {
        border-color: #86b7fe;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }
    
    #combined-voice-select optgroup {
        font-weight: bold;
        color: #495057;
    }
    
    #combined-voice-select option {
        padding: 6px 8px;
    }
`;
document.head.appendChild(combinedSelectStyle);

// Khi trang t·∫£i xong, c·∫≠p nh·∫≠t tr·∫°ng th√°i combined select
window.addEventListener('DOMContentLoaded', function() {
    // ƒê·∫£m b·∫£o voices ƒë∆∞·ª£c t·∫£i ƒë·∫ßy ƒë·ªß tr∆∞·ªõc khi c·∫≠p nh·∫≠t UI
    setTimeout(() => {
        // ƒê·∫£m b·∫£o c·∫≠p nh·∫≠t combined select sau khi voices ƒë√£ load
        updateCombinedVoiceSelect();
        
        // Ki·ªÉm tra n·∫øu ƒëang s·ª≠ d·ª•ng Web Speech API
        if (useWebSpeech.checked) {
            // N·∫øu combined select c√≥ t√πy ch·ªçn v·ªõi data-isVietnamese="true", ∆∞u ti√™n ch·ªçn t√πy ch·ªçn ƒë√≥
            const vietnameseOptions = Array.from(combinedVoiceSelect.querySelectorAll('option[data-is-vietnamese="true"]'));
            if (vietnameseOptions.length > 0) {
                combinedVoiceSelect.value = vietnameseOptions[0].value;
                
                // C·∫≠p nh·∫≠t l·∫°i c√°c select kh√°c theo gi√° tr·ªã ƒë√£ ch·ªçn
                if (combinedVoiceSelect.value.startsWith('browser:')) {
                    const browserVoiceIndex = combinedVoiceSelect.value.split(':')[1];
                    voiceSelect.value = browserVoiceIndex;
                    
                    // K√≠ch ho·∫°t s·ª± ki·ªán change cho voice select
                    const event = new Event('change');
                    voiceSelect.dispatchEvent(event);
                }
            } else if (voiceSelect.value) {
                // N·∫øu kh√¥ng t√¨m th·∫•y gi·ªçng Vi·ªát, nh∆∞ng ƒë√£ c√≥ gi·ªçng ƒë∆∞·ª£c ch·ªçn tr∆∞·ªõc ƒë√≥
                combinedVoiceSelect.value = 'browser:' + voiceSelect.value;
            }
        } else {
            // ƒêang s·ª≠ d·ª•ng Server TTS
            if (selectedServerModel) {
                combinedVoiceSelect.value = 'server:' + selectedServerModel;
            }
        }
        
        console.log('ƒê√£ kh·ªüi t·∫°o xong voice selection. ' + 
                  (useWebSpeech.checked ? 'S·ª≠ d·ª•ng Web Speech API' : 'S·ª≠ d·ª•ng Server TTS'));
    }, 1000);
});

// H√†m lo·∫°i b·ªè HTML tags t·ª´ vƒÉn b·∫£n
function stripHtml(html) {
    // Ki·ªÉm tra n·∫øu c√≥ HTML tags th·ª±c s·ª±
    const hasHtmlTags = /<[a-z][\s\S]*>/i.test(html);
    
    // T·∫°o m·ªôt ph·∫ßn t·ª≠ div t·∫°m th·ªùi
    const tempDiv = document.createElement('div');
    // G√°n HTML v√†o div
    tempDiv.innerHTML = html;
    // L·∫•y text content (ƒë√£ lo·∫°i b·ªè t·∫•t c·∫£ c√°c th·∫ª HTML)
    const textContent = tempDiv.textContent || tempDiv.innerText || '';
    // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a
    const cleanedText = textContent.trim()
        // Lo·∫°i b·ªè nhi·ªÅu d√≤ng tr·ªëng li√™n ti·∫øp
        .replace(/\n\s*\n\s*\n/g, '\n\n')
        // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a ·ªü ƒë·∫ßu d√≤ng
        .replace(/^\s+/gm, '')
        // Chu·∫©n h√≥a d·∫•u c√°ch
        .replace(/\s+/g, ' ');
    
    return cleanedText;
}

// Ch·ª©c nƒÉng streaming TTS - ph√°t v√† hi·ªÉn th·ªã d·∫ßn d·∫ßn
function streamingTTS(text) {
    // Lo·∫°i b·ªè HTML tags tr∆∞·ªõc khi x·ª≠ l√Ω
    const cleanText = stripHtml(text);
    
    // D·ª´ng b·∫•t k·ª≥ √¢m thanh n√†o ƒëang ph√°t
    stopAllSpeech();
    
    console.log(`Ph√°t to√†n b·ªô vƒÉn b·∫£n ti·∫øng Vi·ªát, ƒë·ªô d√†i: ${cleanText.length} k√Ω t·ª±`);
    
    startTalkingAnimation();
    isSpeaking = true;
    isPaused = false;
    updateSpeechControlButtonsState();
    
    // Log th√¥ng tin v·ªÅ voice ƒë∆∞·ª£c s·ª≠ d·ª•ng
    if (useWebSpeech.checked) {
        console.log("S·ª≠ d·ª•ng Web Speech API");
        
        // L·∫•y th√¥ng tin gi·ªçng ƒë∆∞·ª£c ch·ªçn
        if (voiceSelect.value) {
            const voices = speechSynthesis.getVoices();
            const selectedVoiceIndex = parseInt(voiceSelect.value);
            if (!isNaN(selectedVoiceIndex) && selectedVoiceIndex >= 0 && selectedVoiceIndex < voices.length) {
                const selectedVoice = voices[selectedVoiceIndex];
                console.log(`S·ª≠ d·ª•ng gi·ªçng ƒë√£ ch·ªçn: ${selectedVoice.name} (${selectedVoice.lang})`);
            }
        }
        
        // Web Speech API
        speakWithBrowserTTS(cleanText, () => {
            console.log("K·∫øt th√∫c ph√°t to√†n b·ªô vƒÉn b·∫£n");
            
            // Ch·ªâ d·ª´ng n·∫øu kh√¥ng ·ªü tr·∫°ng th√°i t·∫°m d·ª´ng
            if (isSpeaking && !isPaused) {
                stopTalkingAnimation();
                isSpeaking = false;
                isPaused = false;
                updateSpeechControlButtonsState();
            }
        });
    } else {
        console.log("S·ª≠ d·ª•ng Server TTS");
        console.log(`Model server ƒë∆∞·ª£c ch·ªçn: ${selectedServerModel}`);
        
        // Server TTS
        speakWithServerTTS(cleanText).then(() => {
            console.log("K·∫øt th√∫c ph√°t to√†n b·ªô vƒÉn b·∫£n");
            
            // Ch·ªâ d·ª´ng n·∫øu kh√¥ng ·ªü tr·∫°ng th√°i t·∫°m d·ª´ng
            if (isSpeaking && !isPaused) {
                stopTalkingAnimation();
                isSpeaking = false;
                isPaused = false;
                updateSpeechControlButtonsState();
            }
        }).catch(error => {
            console.error('Server TTS error:', error);
            stopTalkingAnimation();
            isSpeaking = false;
            isPaused = false;
            updateSpeechControlButtonsState();
        });
    }
}

function playTextToSpeechRealtime(text) {
    // D·ª´ng b·∫•t k·ª≥ √¢m thanh n√†o ƒëang ph√°t
    stopAllSpeech();
    
    startTalkingAnimation();
    isSpeaking = true;
    updateSpeechControlButtonsState();
    
    // S·ª≠ d·ª•ng h√†m chung ƒë·ªÉ ƒë·∫£m b·∫£o nh·∫•t qu√°n
    speakWithBrowserTTS(text, () => {
        stopTalkingAnimation();
        isSpeaking = false;
        isPaused = false;
        updateSpeechControlButtonsState();
    });
}