
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <title><%= title %></title>

  <style>
    .ace_gutter {
        z-index: 0 !important;
    }
  </style>
  <!-- Bootstrap CSS để tạo giao diện đẹp -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Choices.js CSS để tạo dropdown có tính năng tìm kiếm -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css">
  <!-- Ace Editor để tạo code editor -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.39.1/ace.js" integrity="sha512-tGc7XQXpQYGpFGmdQCEaYhGdJ8B64vyI9c8zdEO4vjYaWRCKYnLy+HkudtawJS3ttk/Pd7xrkRjK8ijcMMyauw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <!-- Ace Editor Modelist Extension để lấy danh sách các ngôn ngữ hỗ trợ -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.39.1/ext-modelist.min.js" integrity="sha512-GAp+4Q5VgeCXiNxD89+0KWJwPSLqXM9FgTRLhJxGjB1jjFrb6l9bYUkaTun39gcvZ89FYUXLYQEhLk8TEJztYA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
</head>
<body>
  <div class="container mt-4">
    <!-- API Key Form -->
    <% if (showApiKeyForm) { %>
        <div class="mb-4">
            <h3>Enter Google API Key</h3>
            <% if (message) { %>
                <div class="alert alert-info" style="white-space: pre-line;"><%= message %></div>
            <% } %>
            <form id="apiKeyForm" class="mb-3">
                <div class="mb-3">
                    <input type="text" id="apiKey" class="form-control" placeholder="Enter your Google API Key" required>
                </div>
                <button type="submit" class="btn btn-primary">Save API Key</button>
            </form>
        </div>
    <% } %>

    <!-- Tiêu đề của trang -->
    <h2 class="mb-4">Nhập JD hoặc Upload File PDF</h2>
    
    <!-- Form nhập JD hoặc upload PDF -->
    <form id="jdForm" method="post" enctype="multipart/form-data" action="/jd/generate-question">
      <!-- Textarea để nhập JD -->
      <div class="mb-3">
        <textarea name="jdText" id="jdText" class="form-control" placeholder="Nhập JD ở đây..." rows="10"></textarea>
      </div>
      <!-- Phần upload file PDF -->
      <div class="mb-3">
        <label for="pdfFile" class="form-label">Upload File PDF</label>
        <input type="file" name="pdfFile" id="pdfFile" accept="application/pdf" class="form-control">
        <!-- Nút xóa file PDF khi không cần thiết -->
        <button type="button" id="removePdf" class="btn btn-danger btn-sm mt-2" style="display: none;">Xóa file PDF</button>
      </div>
      <!-- Dropdown chọn ngôn ngữ phỏng vấn toàn cầu (ví dụng: Tiếng Việt, English, 中文) -->
      <div class="mb-3">
        <label for="interviewLanguage" class="form-label">Chọn ngôn ngữ phỏng vấn:</label>
        <select id="interviewLanguage" name="interviewLanguage" class="form-select" style="width: 100%;">
          <option value="vi" selected>Tiếng Việt</option>
          <option value="en">English</option>
          <option value="zh">中文</option>
          <!-- Thêm option khác nếu cần -->
        </select>
      </div>
      <!-- Nút submit của form JD kèm spinner hiển thị trong lúc chờ -->
      <div class="mb-3">
        <button type="submit" id="submitJD" class="btn btn-primary">Cho tôi câu hỏi</button>
        <span id="jdSpinner" class="spinner-border spinner-border-sm ms-2" style="display: none;" role="status" aria-hidden="true"></span>
      </div>
    </form>

    <!-- Phần hiển thị câu hỏi được tạo từ server -->
    <div id="questionSection" class="mt-4" style="display: none;">
      <h3>Generated Question:</h3>
      <div id="generatedQuestion" class="mb-3"></div>
      
      <!-- Add specific question section right after the generated question -->
      <div id="specificQuestionSection" class="mt-3 mb-4">
        <h4>Answer Specific Question:</h4>
        <div class="mb-3">
          <input type="text" id="specificQuestion" class="form-control" placeholder="Enter a specific interview question...">
        </div>
        <div class="mb-3">
          <button type="button" id="getSpecificAnswer" class="btn btn-primary">
            <i class="bi bi-question-circle"></i> Get Answer
          </button>
          <span id="specificAnswerSpinner" class="spinner-border spinner-border-sm ms-2" style="display: none;" role="status" aria-hidden="true"></span>
        </div>
        
        <!-- Specific answer results section -->
        <div id="specificAnswerSection" class="mt-3 mb-4" style="display: none;">
          <div class="d-flex justify-content-between align-items-center mb-2">
            <h5 id="specificQuestionDisplay"></h5>
            <div class="d-flex align-items-center gap-2">
              <button type="button" id="translateSpecificAnswer" class="btn btn-outline-secondary btn-sm">
                <i class="bi bi-translate"></i> Translate
              </button>
              <select id="translateSpecificAnswerLanguage" class="form-select form-select-sm" style="width: auto;">
                <option value="vi">Tiếng Việt</option>
                <option value="en">English</option>
                <option value="zh">中文</option>
              </select>
              <button type="button" id="useSpecificAnswer" class="btn btn-outline-primary btn-sm">
                <i class="bi bi-clipboard"></i> Use This Answer
              </button>
            </div>
          </div>
          <div id="specificAnswerResult" class="p-3 border rounded bg-light"></div>
        </div>
      </div>
      
      <!-- Add guidance button -->
      <div class="mb-3">
        <button type="button" id="getGuidance" class="btn btn-info">
          <i class="bi bi-lightbulb"></i> Get Answer Guidance
        </button>
        <span id="guidanceSpinner" class="spinner-border spinner-border-sm ms-2" style="display: none;" role="status" aria-hidden="true"></span>
      </div>
      
      <!-- Guidance results section -->
      <!-- Add after the guidance section but before the answer form -->
      <div id="guidanceSection" class="mt-3 mb-4" style="display: none;">
        <h4>Answer Guidance:</h4>
        <div class="d-flex align-items-center gap-2 mb-2">
          <button type="button" id="translateGuidance" class="btn btn-outline-secondary btn-sm">
            <i class="bi bi-translate"></i> Translate
          </button>
          <select id="translateLanguage" class="form-select form-select-sm" style="width: auto;">
            <option value="vi">Tiếng Việt</option>
            <option value="en">English</option>
            <option value="zh">中文</option>
          </select>
          <span id="translateSpinner" class="spinner-border spinner-border-sm ms-2" style="display: none;" role="status" aria-hidden="true"></span>
        </div>
        <div id="guidanceResult" class="p-3 border rounded bg-light"></div>
      </div>
      
      <!-- Add sample answer generation button -->
      <div class="mb-3">
        <button type="button" id="generateAnswer" class="btn btn-success">
          <i class="bi bi-robot"></i> Generate Sample Answer
        </button>
        <span id="answerGenSpinner" class="spinner-border spinner-border-sm ms-2" style="display: none;" role="status" aria-hidden="true"></span>
      </div>
      
      <!-- Sample answer section -->
      <div id="sampleAnswerSection" class="mt-3 mb-4" style="display: none;">
        <h4>Sample Answer:</h4>
        <div class="d-flex align-items-center gap-2 mb-2">
          <button type="button" id="translateAnswer" class="btn btn-outline-secondary btn-sm">
            <i class="bi bi-translate"></i> Translate
          </button>
          <select id="translateAnswerLanguage" class="form-select form-select-sm" style="width: auto;">
            <option value="vi">Tiếng Việt</option>
            <option value="en">English</option>
            <option value="zh">中文</option>
          </select>
          <button type="button" id="useAnswer" class="btn btn-outline-primary btn-sm ms-2">
            <i class="bi bi-clipboard"></i> Use This Answer
          </button>
          <span id="translateAnswerSpinner" class="spinner-border spinner-border-sm ms-2" style="display: none;" role="status" aria-hidden="true"></span>
        </div>
        <div id="sampleAnswerResult" class="p-3 border rounded bg-light"></div>
      </div>
      
      <!-- Form for answer evaluation (existing code) -->
      <form id="answerForm" method="post" action="/jd/evaluate-answer">
        <!-- Lưu lại JD và câu hỏi dưới dạng hidden để gửi sang bước đánh giá -->
        <input type="hidden" name="jdText" id="hiddenJDText">
        <input type="hidden" name="question" id="hiddenQuestion">

        <!-- Dropdown chọn ngôn ngữ lập trình cho editor (sử dụng Choices.js để hỗ trợ search) -->
        <div class="mb-3">
            <label for="languageSelect" class="form-label">Chọn ngôn ngữ lập trình cho editor (nếu cần):</label>
            <select id="languageSelect" class="form-select" style="width: 100%;"></select>
        </div>
        
        <!-- Container chứa Ace Editor -->
        <div class="mb-3">
          <label for="codeEditor" class="form-label">Nhập câu trả lời:</label>
          <div class="d-flex align-items-center gap-2 mb-2">
            <button type="button" id="startSpeech" class="btn btn-primary">
              <i class="bi bi-mic-fill"></i> Trả lời bằng giọng nói
            </button>
            <span id="speechStatus" class="text-muted" style="display: none;">Đang nghe...</span>
          </div>
          <div id="codeEditor" style="height: 500px; width: 100%; border: 1px solid #ced4da;"></div>
          <textarea name="answer" id="answer" style="display:none;"></textarea>
        </div>

        <!-- Nút submit của form đánh giá -->
        <div class="mb-3">
          <button type="submit" id="submitAnswer" class="btn btn-success">Gửi câu trả lời</button>
          <span id="answerSpinner" class="spinner-border spinner-border-sm ms-2" style="display: none;" role="status" aria-hidden="true"></span>
        </div>
      </form>
    </div>

    <!-- Add this JavaScript to handle the guidance button click -->
    <script>
      // Add this after the existing JavaScript code
      document.getElementById('getGuidance')?.addEventListener('click', async function() {
        const guidanceBtn = document.getElementById('getGuidance');
        const guidanceSpinner = document.getElementById('guidanceSpinner');
        
        // Disable button and show spinner
        guidanceBtn.disabled = true;
        guidanceSpinner.style.display = 'inline-block';
        
        try {
          const jdText = document.getElementById('hiddenJDText').value;
          const question = document.getElementById('hiddenQuestion').value;
          
          const response = await fetch('/jd/generate-guidance', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ jdText, question })
          });
          
          const data = await response.json();
          if (data.error) {
            alert(data.error);
          } else {
            // Display guidance
            document.getElementById('guidanceResult').innerHTML = data.guidance;
            document.getElementById('guidanceSection').style.display = 'block';
          }
        } catch (err) {
          console.error(err);
          alert("An error occurred. Please try again.");
        } finally {
          // Re-enable button and hide spinner
          guidanceBtn.disabled = false;
          guidanceSpinner.style.display = 'none';
        }
      });
    </script>

    <!-- Phần hiển thị kết quả đánh giáá -->
    <div id="evaluationSection" class="mt-4" style="display: none;">
      <h3>Kết quả đánh giá:</h3>
      <div id="evaluationResult"></div>
    </div>
  </div>

  <!-- Bootstrap JS Bundle -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <!-- Choices.js để hỗ trợ dropdown có tính năng tìm kiếm -->
  <script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>
  <script>
    /**********************
     * Xử lý file PDF
     **********************/
    const pdfInput = document.getElementById('pdfFile');
    const removePdfButton = document.getElementById('removePdf');
    // Khi file PDF được chọn, hiển thị nút xóa
    pdfInput.addEventListener('change', function(e) {
      const file = e.target.files[0];
      if (file && file.type === 'application/pdf') {
        removePdfButton.style.display = 'inline-block';
      } else {
        removePdfButton.style.display = 'none';
      }
    });
    // Khi bấm nút xóa, reset input file
    removePdfButton.addEventListener('click', function() {
      pdfInput.value = "";
      removePdfButton.style.display = 'none';
    });

    /**********************
     * Khởi tạo Ace Editor
     **********************/
    const editor = ace.edit("codeEditor");
    editor.setTheme("ace/theme/monokai");
    // Đặt mode mặc định cho editor là JavaScript
    editor.session.setMode("ace/mode/javascript");
    editor.setOptions({
      fontSize: "14px",
      showPrintMargin: false
    });

    /**********************
     * Thiết lập dropdown cho ngôn ngữ lập trình của editor
     **********************/
    const modelist = ace.require("ace/ext/modelist");
    const languageSelect = document.getElementById("languageSelect");
    // Lặp qua danh sách các mode được hỗ trợ và tạo option cho dropdown
    modelist.modes.forEach(function(mode) {
      const option = document.createElement("option");
      option.value = mode.mode; // Ví dụ: "ace/mode/javascript"
      option.textContent = mode.caption; // Ví dụ: "JavaScript"
      languageSelect.appendChild(option);
    });
    // Đặt giá trị mặc định cho dropdown editor
    languageSelect.value = "ace/mode/javascript";
    // Sử dụng Choices.js để hỗ trợ tìm kiếm trong dropdown
    const choicesEditor = new Choices(languageSelect, {
      searchEnabled: true,
      shouldSort: false,
      itemSelectText: '',
      placeholder: true,
      placeholderValue: 'Chọn ngôn ngữ...',
    });
    // Khi chọn ngôn ngữ mới, cập nhật mode cho Ace Editor
    languageSelect.addEventListener("change", function() {
      const selectedMode = this.value;
      editor.session.setMode(selectedMode);
    });

    /**********************
     * Thiết lập dropdown cho ngôn ngữ phỏng vấn
     **********************/
    const interviewLanguageSelect = document.getElementById("interviewLanguage");
    const choicesInterview = new Choices(interviewLanguageSelect, {
      searchEnabled: true,
      shouldSort: false,
      itemSelectText: '',
      placeholder: true,
      placeholderValue: 'Chọn ngôn ngữ phỏng vấn...',
    });

    /**********************
     * Xử lý submit form JD (tạo câu hỏi)
     **********************/
    document.getElementById('jdForm').addEventListener('submit', async function(e) {
      e.preventDefault(); // Ngăn chặn hành vi submit mặc định
      const jdForm = e.target;
      const submitJD = document.getElementById('submitJD');
      const jdSpinner = document.getElementById('jdSpinner');

      // Disable nút submit và hiển thị spinner khi đang xử lý
      submitJD.disabled = true;
      jdSpinner.style.display = 'inline-block';

      // Tạo FormData từ form để gửi dữ liệu (bao gồm JD, file PDF, và ngôn ngữ phỏng vấn)
      const formData = new FormData(jdForm);

      try {
        const response = await fetch(jdForm.action, {
          method: 'POST',
          body: formData
        });
        const data = await response.json();
        if (data.error) {
          alert(data.error);
        } else {
          // Hiển thị câu hỏi được tạo ra và lưu vào các trường hidden cho form đánh giá
          document.getElementById('generatedQuestion').innerHTML = data.question;
          document.getElementById('hiddenJDText').value = data.jdText;
          document.getElementById('hiddenQuestion').value = data.question;
          document.getElementById('questionSection').style.display = 'block';
        }
      } catch (err) {
        console.error(err);
        alert("Có lỗi xảy ra, vui lòng thử lại.");
      } finally {
        // Mở lại nút submit và ẩn spinner
        submitJD.disabled = false;
        jdSpinner.style.display = 'none';
      }
    });

    /**********************
     * Xử lý submit form đánh giá câu trả lời
     **********************/
    document.getElementById('answerForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      const answerForm = e.target;
      const submitAnswer = document.getElementById('submitAnswer');
      const answerSpinner = document.getElementById('answerSpinner');

      // Trước khi submit, sao chép nội dung từ Ace Editor vào textarea ẩn
      document.getElementById('answer').value = editor.getValue();

      // Disable nút submit và hiển thị spinner khi đang xử lý
      submitAnswer.disabled = true;
      answerSpinner.style.display = 'inline-block';

      const formData = new FormData(answerForm);

      try {
        const response = await fetch(answerForm.action, {
          method: 'POST',
          body: formData
        });
        const data = await response.json();
        if (data.error) {
          alert(data.error);
        } else {
          // Hiển thị kết quả đánh giá
          document.getElementById('evaluationResult').innerHTML = data.evaluation;
          document.getElementById('evaluationSection').style.display = 'block';
        }
      } catch (err) {
        console.error(err);
        alert("Có lỗi xảy ra, vui lòng thử lại.");
      } finally {
        // Mở lại nút submit và ẩn spinner
        submitAnswer.disabled = false;
        answerSpinner.style.display = 'none';
      }
    });

    /**********************
     * Speech Recognition Setup
     **********************/
    const startSpeechBtn = document.getElementById('startSpeech');
    const speechStatus = document.getElementById('speechStatus');
    
    // Check if browser supports speech recognition
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!SpeechRecognition) {
      startSpeechBtn.style.display = 'none';
    } else {
      const recognition = new SpeechRecognition();
      
      // Configure speech recognition
      recognition.continuous = true;
      recognition.interimResults = true;
      recognition.lang = 'vi-VN'; // Default to Vietnamese

      // Update language when interview language changes
      interviewLanguageSelect.addEventListener('change', function() {
        const langMap = {
          'vi': 'vi-VN',
          'en': 'en-US',
          'zh': 'zh-CN'
        };
        recognition.lang = langMap[this.value] || 'en-US';
      });

      // Handle speech recognition
      let finalTranscript = '';
      
      recognition.onresult = (event) => {
        let interimTranscript = '';
        
        for (let i = event.resultIndex; i < event.results.length; i++) {
          const transcript = event.results[i][0].transcript;
          if (event.results[i].isFinal) {
            finalTranscript += transcript + '\n';
          } else {
            interimTranscript += transcript;
          }
        }
        
        // Update editor content
        editor.setValue(finalTranscript + interimTranscript, 1);
      };

      recognition.onstart = () => {
        speechStatus.style.display = 'inline';
        startSpeechBtn.classList.add('btn-danger');
        startSpeechBtn.innerHTML = '<i class="bi bi-mic-fill"></i> Dừng ghi âm';
      };

      recognition.onend = () => {
        speechStatus.style.display = 'none';
        startSpeechBtn.classList.remove('btn-danger');
        startSpeechBtn.innerHTML = '<i class="bi bi-mic-fill"></i> Trả lời bằng giọng nói';
      };

      // Toggle speech recognition
      let isRecording = false;
      startSpeechBtn.addEventListener('click', () => {
        if (!isRecording) {
          finalTranscript = editor.getValue(); // Keep existing content
          recognition.start();
        } else {
          recognition.stop();
        }
        isRecording = !isRecording;
      });
    }
  </script>
</body>
</html>
<!-- Add this JavaScript at the bottom of the file, before the closing </body> tag -->
<script>
    document.getElementById('apiKeyForm')?.addEventListener('submit', async function(e) {
        e.preventDefault();
        const apiKey = document.getElementById('apiKey').value;
        
        // Save API key to cookies and reload the page
        document.cookie = `apiKey=${apiKey}; path=/; max-age=2592000`; // expires in 30 days
        window.location.reload();
    });
</script>

<!-- Add this JavaScript to handle the answer generation and translation -->
<script>
  // Store original content for translations
  // Remove this duplicate declaration
  // let originalGuidanceHtml = '';
  let originalAnswerHtml = '';
  let isGuidanceTranslated = false;
  let isAnswerTranslated = false;
  
  // Handle generate sample answer button
  document.getElementById('generateAnswer')?.addEventListener('click', async function() {
    const generateBtn = document.getElementById('generateAnswer');
    const spinner = document.getElementById('answerGenSpinner');
    
    // Disable button and show spinner
    generateBtn.disabled = true;
    spinner.style.display = 'inline-block';
    
    try {
      const jdText = document.getElementById('hiddenJDText').value;
      const question = document.getElementById('hiddenQuestion').value;
      const guidance = document.getElementById('guidanceResult').innerText || '';
      
      const response = await fetch('/jd/generate-answer', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ jdText, question, guidance })
      });
      
      const data = await response.json();
      if (data.error) {
        alert(data.error);
      } else {
        // Display sample answer
        document.getElementById('sampleAnswerResult').innerHTML = data.answer;
        document.getElementById('sampleAnswerSection').style.display = 'block';
        originalAnswerHtml = data.answer;
        isAnswerTranslated = false;
      }
    } catch (err) {
      console.error(err);
      alert("An error occurred. Please try again.");
    } finally {
      // Re-enable button and hide spinner
      generateBtn.disabled = false;
      spinner.style.display = 'none';
    }
  });
  
  // Handle translate answer button
  document.getElementById('translateAnswer')?.addEventListener('click', async function() {
    const translateBtn = document.getElementById('translateAnswer');
    const spinner = document.getElementById('translateAnswerSpinner');
    const targetLanguage = document.getElementById('translateAnswerLanguage').value;
    const answerResult = document.getElementById('sampleAnswerResult');
    
    // If already translated, revert to original
    if (isAnswerTranslated) {
      answerResult.innerHTML = originalAnswerHtml;
      translateBtn.innerHTML = '<i class="bi bi-translate"></i> Translate';
      isAnswerTranslated = false;
      return;
    }
    
    // Disable button and show spinner
    translateBtn.disabled = true;
    spinner.style.display = 'inline-block';
    
    try {
      const response = await fetch('/jd/translate-text', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
          text: answerResult.innerText, 
          targetLanguage: targetLanguage,
          contentType: 'answer'
        })
      });
      
      const data = await response.json();
      if (data.error) {
        alert(data.error);
      } else {
        // Display translated answer
        answerResult.innerHTML = data.translation;
        translateBtn.innerHTML = '<i class="bi bi-translate"></i> Show Original';
        isAnswerTranslated = true;
      }
    } catch (err) {
      console.error(err);
      alert("An error occurred during translation. Please try again.");
    } finally {
      // Re-enable button and hide spinner
      translateBtn.disabled = false;
      spinner.style.display = 'none';
    }
  });
  
  // Handle "Use This Answer" button
  document.getElementById('useAnswer')?.addEventListener('click', function() {
    const sampleAnswer = document.getElementById('sampleAnswerResult').innerText;
    editor.setValue(sampleAnswer, 1); // Set the editor content to the sample answer
  });
  
  // Update translation language when interview language changes
  document.getElementById('interviewLanguage')?.addEventListener('change', function() {
    const lang = this.value;
    document.getElementById('translateLanguage').value = lang;
    document.getElementById('translateAnswerLanguage').value = lang;
  });
</script>

<!-- Add this JavaScript to handle the translation button click -->
    <script>
      // Store the original guidance text
      let originalGuidanceHtml = '';
      let isCurrentlyTranslated = false;
      
      document.getElementById('translateGuidance')?.addEventListener('click', async function() {
        const translateBtn = document.getElementById('translateGuidance');
        const translateSpinner = document.getElementById('translateSpinner');
        const translateLanguage = document.getElementById('translateLanguage').value;
        const guidanceResult = document.getElementById('guidanceResult');
        
        // If already translated, revert to original
        if (isCurrentlyTranslated) {
          guidanceResult.innerHTML = originalGuidanceHtml;
          translateBtn.innerHTML = '<i class="bi bi-translate"></i> Translate';
          isCurrentlyTranslated = false;
          return;
        }
        
        // Save original content if not already saved
        if (!originalGuidanceHtml) {
          originalGuidanceHtml = guidanceResult.innerHTML;
        }
        
        // Disable button and show spinner
        translateBtn.disabled = true;
        translateSpinner.style.display = 'inline-block';
        
        try {
          const response = await fetch('/jd/translate-guidance', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ 
              text: guidanceResult.innerText, 
              targetLanguage: translateLanguage 
            })
          });
          
          const data = await response.json();
          if (data.error) {
            alert(data.error);
          } else {
            // Display translated guidance
            guidanceResult.innerHTML = data.translation;
            translateBtn.innerHTML = '<i class="bi bi-translate"></i> Show Original';
            isCurrentlyTranslated = true;
          }
        } catch (err) {
          console.error(err);
          alert("An error occurred during translation. Please try again.");
        } finally {
          // Re-enable button and hide spinner
          translateBtn.disabled = false;
          translateSpinner.style.display = 'none';
        }
      });
      
      // Update translation language when interview language changes
      document.getElementById('interviewLanguage')?.addEventListener('change', function() {
        document.getElementById('translateLanguage').value = this.value;
      });
    </script>
<!-- Add this after the generated question display but before the answer form -->
<div id="specificQuestionSection" class="mt-3 mb-4" style="display: none;">
  <h4>Answer Specific Question:</h4>
  <div class="mb-3">
    <input type="text" id="specificQuestion" class="form-control" placeholder="Enter a specific interview question...">
  </div>
  <div class="mb-3">
    <button type="button" id="getSpecificAnswer" class="btn btn-primary">
      <i class="bi bi-question-circle"></i> Get Answer
    </button>
    <span id="specificAnswerSpinner" class="spinner-border spinner-border-sm ms-2" style="display: none;" role="status" aria-hidden="true"></span>
  </div>
  
  <!-- Specific answer results section -->
  <div id="specificAnswerSection" class="mt-3 mb-4" style="display: none;">
    <div class="d-flex justify-content-between align-items-center mb-2">
      <h5 id="specificQuestionDisplay"></h5>
      <div class="d-flex align-items-center gap-2">
        <button type="button" id="translateSpecificAnswer" class="btn btn-outline-secondary btn-sm">
          <i class="bi bi-translate"></i> Translate
        </button>
        <select id="translateSpecificAnswerLanguage" class="form-select form-select-sm" style="width: auto;">
          <option value="vi">Tiếng Việt</option>
          <option value="en">English</option>
          <option value="zh">中文</option>
        </select>
        <button type="button" id="useSpecificAnswer" class="btn btn-outline-primary btn-sm">
          <i class="bi bi-clipboard"></i> Use This Answer
        </button>
      </div>
    </div>
    <div id="specificAnswerResult" class="p-3 border rounded bg-light"></div>
  </div>
</div>

// Add this JavaScript to handle the specific question functionality
<script>
// Add this JavaScript to handle the specific question answer functionality
document.getElementById('getSpecificAnswer')?.addEventListener('click', async function() {
  const specificQuestion = document.getElementById('specificQuestion').value.trim();
  if (!specificQuestion) {
    alert('Please enter a specific interview question');
    return;
  }
  
  const getSpecificAnswerBtn = document.getElementById('getSpecificAnswer');
  const spinner = document.getElementById('specificAnswerSpinner');
  
  // Disable button and show spinner
  getSpecificAnswerBtn.disabled = true;
  spinner.style.display = 'inline-block';
  
  try {
    const jdText = document.getElementById('hiddenJDText').value;
    
    const response = await fetch('/jd/answer-specific-question', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ jdText, specificQuestion })
    });
    
    const data = await response.json();
    if (data.error) {
      alert(data.error);
    } else {
      // Display specific question and answer
      document.getElementById('specificQuestionDisplay').textContent = specificQuestion;
      document.getElementById('specificAnswerResult').innerHTML = data.specificAnswer;
      document.getElementById('specificAnswerSection').style.display = 'block';
      
      // Store original answer for translation
      window.originalSpecificAnswerHtml = data.specificAnswer;
      window.isSpecificAnswerTranslated = false;
    }
  } catch (err) {
    console.error(err);
    alert("An error occurred. Please try again.");
  } finally {
    // Re-enable button and hide spinner
    getSpecificAnswerBtn.disabled = false;
    spinner.style.display = 'none';
  }
});

// Handle translate specific answer button
document.getElementById('translateSpecificAnswer')?.addEventListener('click', async function() {
  const translateBtn = document.getElementById('translateSpecificAnswer');
  const targetLanguage = document.getElementById('translateSpecificAnswerLanguage').value;
  const answerResult = document.getElementById('specificAnswerResult');
  
  // If already translated, revert to original
  if (window.isSpecificAnswerTranslated) {
    answerResult.innerHTML = window.originalSpecificAnswerHtml;
    translateBtn.innerHTML = '<i class="bi bi-translate"></i> Translate';
    window.isSpecificAnswerTranslated = false;
    return;
  }
  
  // Disable button
  translateBtn.disabled = true;
  
  try {
    const response = await fetch('/jd/translate-text', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ 
        text: answerResult.innerText, 
        targetLanguage: targetLanguage,
        contentType: 'answer'
      })
    });
    
    const data = await response.json();
    if (data.error) {
      alert(data.error);
    } else {
      // Display translated answer
      answerResult.innerHTML = data.translation;
      translateBtn.innerHTML = '<i class="bi bi-translate"></i> Show Original';
      window.isSpecificAnswerTranslated = true;
    }
  } catch (err) {
    console.error(err);
    alert("An error occurred during translation. Please try again.");
  } finally {
    // Re-enable button
    translateBtn.disabled = false;
  }
});

// Handle "Use This Answer" button for specific answers
document.getElementById('useSpecificAnswer')?.addEventListener('click', function() {
  const specificAnswer = document.getElementById('specificAnswerResult').innerText;
  editor.setValue(specificAnswer, 1); // Set the editor content to the specific answer
});

// No need for the observer anymore since the section is directly embedded
</script>